review:
      1.最初的做法是：一个请求对应一个Servlet，这样存在的问题是servlet太多了
      2.把一些列的请求都对应一个Servlet,IndexServlet/AddServlet/EditServlet/DelServlet/UpdateServlet...
      通过operate的值来调用FruitServlet中的哪一个方法
         ①使用switch-case：
                  缺：如果方法很多，那么会非常繁长,代码冗余
         ②通过反射：
                  String operate=req.getParameter("operate");
                  if(StringUtil.isEmpty(operate)){
                        operate="index";
                  }
                  try{
                  Method method=getClass().getDaeclaredMethod(operate,HttpServletRequest.class,HttpServletResponse);
                  if(method!=null){
                  method.invoke(this,req,resp);
                  return;
                  }
                  }
      3.在上一个版本中我们使用了反射技术，但其实也还是存在一定的问题：每一个servlet中都有类似的反射技术的代码。因此继续抽取DispatchServlet这个类的工作
      分为两大部分：
         ①根据url定位到能够处理这个请求的controller组件：
             1）从url中提取servletPath：/fruit.do ->fruit
             2）根据fruit找到对应的组件：FruitController,这个对应的依据存储在applicationContext.xml当中
              <bean id="fruit" class="com.example.fruits.controller.FruitsController"/>
              通过DOM技术我们去解析XML文件，在中央控制器中形成一个beanMap
              InputStream inputStream = getClass().getClassLoader().getResourceAsStream("applicationContext.xml");
                         //1.创建DocumentBuilderFactory
                         DocumentBuilderFactory documentBuilderFactory=DocumentBuilderFactory.newInstance();
                         DocumentBuilder documentBuilder=documentBuilderFactory.newDocumentBuilder();
                         //3.创建Document对象
                         Document document=documentBuilder.parse(inputStream);
                         //4.获取所有bean节点
                         NodeList beanNodeList = document.getElementsByTagName("bean");
                         for(int i=0;i< beanNodeList.getLength();i++){
                             Node beanNode = beanNodeList.item(i);
                             if(beanNode.getNodeType()==Node.ELEMENT_NODE){
                                 Element beanElement=(Element) beanNode;
                                 String beanId = beanElement.getAttribute("id");
                                 String beanClass = beanElement.getAttribute("class");
                                 Class controllerBeanClazz=Class.forName(beanClass);
                                 Object beanObj =controllerBeanClazz.newInstance();
                                 beanMap.put(beanId,beanObj);

             3）根据获取到的operate的值，定位到我们FruitController中需要调用的方法

         ②调用Controller组件中的方法：
             1）获取参数
               获取即将要调用的方法的参数签名信息：Parameter[] parameters=method.getParameters();
               通过parameter.getName()获取参数的名称；
               准备了Object[] parameterValues这个数组用来存放对应参数的参数值
               另外，我们需要考虑参数的类型问题，需要做类型转化的工作。通过parameter.getType()获取参数的类型，并进行转换

                Method[] methods = controllerBeanObj.getClass().getDeclaredMethods();
                         for(Method method:methods){
                             if(operate.equals(method.getName())){
                                 //1.统一获取请求参数
                                 //获取当前方法的参数，返回参数数组
                                Parameter[] parameters= method.getParameters();
                                //用parameterValues用来承载参数的值
                                Object[] parameterValues=new Object[parameters.length];
                                for(int i=0;i< parameters.length;i++){
                                    Parameter parameter=parameters[i];
                                   String parameterName= parameter.getName();
                                    if ("req".equals(parameterName)) {
                                        parameterValues[i]=req;
                                    } else if ("resp".equals(parameterName)) {
                                        parameterValues[i]=resp;
                                    } else if ("session".equals(parameterName)) {
                                        parameterValues[i]=req.getSession();
                                    }else {
                                        String parameterValue = req.getParameter(parameterName);
                                        String typeName = parameter.getType().getName();
                                        Object parameterObj=parameterValue;
                                        if(parameterObj!=null) {
                                            if ("java.lang.Integer".equals(typeName)) {
                                                parameterObj = Integer.parseInt(parameterValue);
                                            } else if ("double".equals(typeName)) {
                                                parameterObj = Double.parseDouble(parameterValue);
                                            }
                                        }
                                        parameterValues[i]=parameterObj;
                                    }
                                }
             2）执行方法

              Object controllerBeanObj = beanMap.get(servletPath);
              method.setAccessible(true);
              Object returnObj=method.invoke(controllerBeanObj,parameterValues);
              String mrstr=(String) returnObj;
             3）视图处理
              if(mrstr.startsWith("redirect:")){  //redirect:fruit.do
               String redirectStr = mrstr.substring("redirect:".length());
               resp.sendRedirect(redirectStr);
               }else{
               super.processTemplate(mrstr,req,resp);
               }